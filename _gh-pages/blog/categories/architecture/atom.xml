<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: architecture | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/architecture/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2017-09-10T21:04:34-04:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Tech Behind Live Auction Integration]]></title>
    <link href="http://artsy.github.io/blog/2016/08/09/the-tech-behind-live-auction-integration/"/>
    <updated>2016-08-09T11:30:00-04:00</updated>
    <id>http://artsy.github.io/blog/2016/08/09/the-tech-behind-live-auction-integration</id>
    <content type="html"><![CDATA[<p>In late June, the <a href="https://www.artsy.net/auctions/">Artsy auctions</a> team launched our Live Auction Integration (LAI) product. It allows people to participate online in live sales held at auction houses <a href="https://www.artsy.net/auction-partnerships">that partner with Artsy</a>. It was a big project, begun in December, involving both brand new software and extensive integration work with the rest of our systems. This is the first in what will be a series of blog posts discussing the engineering work we did to get a complex product from inception to launch in such a brief time window, with a go-live deadline set in stone weeks in advance. In this, I’ll dig into what we shipped on a high level, as well as some of the overarching technical decisions.</p>

<!-- more -->


<p>LAI raised challenges that were novel to our engineering team. The product is a real-time experience from the perspectives of the bidder and the auction house. Producing that experience requires a complex human + computer system. There are two main flows of information: from auction house to bidder, and vice versa. These are mediated by our systems and staff as follows:</p>

<ul>
<li>As bids occur in the auction house sale room, an Artsy operator working on-site inputs that activity into a web interface so that online participants can keep track of what’s happening.</li>
<li>As online participants place bids, our system records those as “prospective bids”, and an Artsy bidding clerk on site at the auction house bids on their behalf in the auction house. As those bids are recognized, they are reflected back to all participants, through the prior flow.</li>
</ul>


<p>To make this easier to visualize:</p>

<p><img src="/images/2016-08-09-the-tech-behind-live-auction-integration/Artsy%20Live%20Auction%20Integration%20flow.png" alt="Artsy Live Auction Integration Flow" /></p>

<p>This needs to happen in a tight loop to allow online bidders to be competitive with those in the room and via auction house phone clerks. The architecture and UX of the LAI product were optimized for that goal. In addition, we built the system to integrate with live events hosted by our partners. As the events are outside our direct control, there are many, many ways things can deviate from this idealized flow. We had to carefully account for these situations.</p>

<p>Where possible, we leveraged our existing auctions technology. But we took the opportunity to upgrade that technology in some places and chose new approaches in others. Meanwhile, we were running the busiest Artsy auction season to date, and we had to ensure that we weren’t disrupting our existing stack. Below, I discuss the pieces of the end-to-end product.</p>

<a name="The.Live.user.experience"></a>
<h1>The Live user experience</h1>

<p>When the live auction actually begins, participants and Artsy staff interact with the system with front-end software developed from scratch. Web users (desktop and mobile) and staff use a new, dedicated Artsy Live web application, which is implemented in a project we call Prediction. iOS Artsy App users can also participate with newly developed UX within that app.</p>

<a name="The.web.app:.Prediction"></a>
<h2>The web app: Prediction</h2>

<p>Our bidder and operator web interfaces are implemented in an application we call Prediction, a <a href="https://medium.com/@mjackson/universal-javascript-4761051b7ae9#.ev1yd3juy">universal</a> <a href="https://facebook.github.io/react/">React</a>+<a href="http://redux.js.org/">Redux</a> JavaScript app, served from an <a href="http://expressjs.com/">Express</a> server. Using React allowed us to completely share our view layer code for pre-rendering in the server and making updates in the client.</p>

<p><img src="/images/2016-08-09-the-tech-behind-live-auction-integration/Prediction%20Bidder%20Screenshot.png" alt="Prediction Bidder UI" /></p>

<p>Keeping our state management and transition code organized with Redux allowed us to achieve a massive amount of reuse of model and controller code between our web interfaces. To solve Redux's <a href="http://stackoverflow.com/q/34570758/807674">async</a> and <a href="http://stackoverflow.com/q/34299460/807674">data conveyance</a> “problems", we built an integration layer for React and Redux called <a href="https://github.com/artsy/react-redux-controller">React Redux Controller</a>.</p>

<p><img src="/images/2016-08-09-the-tech-behind-live-auction-integration/Prediction%20Operator%20Screenshot.png" alt="Prediction Operator UI" /></p>

<p>We found the React+Redux approach to model-view-controller app development to be a major win in what it gave us for maintainability, code reuse, easy testability, and the ability to reason about our code.</p>

<a name="The.iOS.native.app:.Eigen"></a>
<h2>The iOS native app: Eigen</h2>

<p>For users of the Artsy iOS app, known to our engineering team as <a href="https://github.com/artsy/eigen">Eigen</a>, a touch-optimized LAI experience was coded in Swift. It shares the same app with existing Objective-C code as well as <a href="https://facebook.github.io/react-native/">React Native</a> code used for other aspects of the iOS experience. We considered using React Native for this, but we decided to go with more familiar technology to contain the risk.</p>

<p><img src="/images/2016-08-09-the-tech-behind-live-auction-integration/Eigen%20Bidder%20Screenshot.png" alt="Eigen Bidder UI" /></p>

<p>Both of these applications interact with our central Artsy back-end service to pull in artist, artwork, and sale metadata when the user enters the auction. These queries are mediated by a <a href="http://graphql.org/">GraphQL</a> middleware service we call <a href="https://github.com/artsy/metaphysics">Metaphysics</a> (also discussed <a href="/blog/2016/06/19/graphql-for-mobile/">here</a>), which vastly simplified the fetching process in the front-end services. But from that point forward, the apps interact with a brand new auction state management system over a bidirectional <a href="https://en.wikipedia.org/wiki/WebSocket">WebSocket</a> API for live updating.</p>

<a name="The.auction.state.management.service:.Causality"></a>
<h1>The auction state management service: Causality</h1>

<p>The other recently launched piece of software delivered for LAI was a new auction state management system we call Causality. It processes bids and other auction events, computes the derived state of a sale, and hosts the bidirectional WebSocket API.</p>

<p>Causality was developed in Scala, using the <a href="http://doc.akka.io/docs/akka/current/intro/what-is-akka.html">Akka</a> technology suite for distributed computing. At its core is an append-only storage engine, based on <a href="http://doc.akka.io/docs/akka/current/scala/persistence.html">Akka Persistence</a>, with a small library we developed called <a href="https://github.com/artsy/atomic-store">Atomic Store</a> that allowed us to achieve strict consistency, at the cost of maximal throughput -- a trade-off that is explored in the readme of that project.</p>

<p>Lastly, Causality has an <a href="http://doc.akka.io/docs/akka/current/scala/http/introduction.html">Akka HTTP</a>-based API layer, with a WebSocket server implemented using <a href="http://doc.akka.io/docs/akka/current/scala/stream/stream-introduction.html">Akka Streams</a>. Asynchronous updates generated in the event processing logic are published across the cluster using <a href="http://doc.akka.io/docs/akka/current/scala/distributed-pub-sub.html">Akka Distributed Pub/Sub</a>, and they are merged into the WebSocket outflow.</p>

<a name="Pre-bidding..tooling..and.other.concerns"></a>
<h1>Pre-bidding, tooling, and other concerns</h1>

<p>In addition to accepting bids placed during a live sale, we also allow users to place bids before the event begins. In practice, this is almost the same workflow as our existing timed auction experience. For this reason, we chose to leverage all of our existing technology. The work of preparing our preexisting tech for LAI involved widespread modifications to our front-end UI, messaging services, admin tooling, and monitoring to make them appropriate for a live sale, as well as a reliable handoff of responsibility from these preexisting front- and back-end services to the new ones at the time the sale goes live.</p>

<p>We relied on our automated test suites, as well as thorough manual testing by the entire Artsy auctions team, to ensure that this handoff functioned smoothly under various circumstances. We will eventually eliminate this duplication. But this will require delicate refactoring of our preexisting tooling, which we will take on, even as we execute a fall auction season significantly busier than the last.</p>

<a name="Reflection"></a>
<h1>Reflection</h1>

<p>In the process of architecting our LAI product, we had to make some tough decisions in the face of new challenges. Chief among these were the decisions on where on the spectrum of bleeding-edge technology versus tried-and-true choices to land, for many of our subcomponents. Bleeding-edge tech often offers more elegant and performant solutions, but at the cost of learning curve and risk of immaturity. We also had to carefully prioritize functionality. Choosing wisely throughout the process was critical to shipping on time. The rationale behind these decisions and their outcomes will be the result of future pieces.</p>

<p>To close, I want to express huge thanks to the auctions product &amp; engineering team for putting in long hours to design, implement, and troubleshoot the software; the auctions arts team for providing the domain knowledge and operational feedback; and our broader Artsy engineering team, at least half of whom directly contributed code to this effort.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa Architecture: Dependencies]]></title>
    <link href="http://artsy.github.io/blog/2015/09/17/Cocoa-Architecture-Dependencies/"/>
    <updated>2015-09-17T20:00:00-04:00</updated>
    <id>http://artsy.github.io/blog/2015/09/17/Cocoa-Architecture-Dependencies</id>
    <content type="html"><![CDATA[<p>As a part of going through the design patterns we've found in the creation of the Artsy iOS apps, I'd like to talk a bit about some of
the way in which we decide our apps dependencies.</p>

<p>It's easy to think of your dependencies as being things in your Podfile, but it's a bit more nuanced than that. The tools you use for development, deployment, testing and external integrations are all things in which you depend on others to make your app work. I'd like to look into the hows and the whys of the decisions we've made.</p>

<!-- more -->


<hr />

<p>The mobile team of is a collection of smart people; we aim to work with people who have different opinions, and different backgrounds. This means we often don't agree on project direction but moving forwards is about finding compromise. Every technical project within Artsy has a de-facto leader, and they get to make the call at the end of the day.</p>

<p>This means that dependencies and priorities change per-project, because a different developer has more influence on the end result. There isn't a singular "Artsy Mobile" way.</p>

<a name="Implicit.Dependencies"></a>
<h3>Implicit Dependencies</h3>

<p>Thinking on the largest macro scope, I think these are our biggest dependencies:</p>

<ul>
<li>Xcode</li>
<li>iOS SDK</li>
<li>Swift</li>
<li>CocoaPods</li>
<li>Individual Pods</li>
<li>Fastlane</li>
</ul>


<p>Some of these are mandatory, mainly Xcode and the iOS SDK. Talk to someone at Facebook however and they'll tell you even that can become a <a href="http://facebook.github.io/react-native/">much weaker dependency</a> than you'd think. For us though, we still create native apps that eventually get built via <code>xcodebuild</code> either via Xcode/AppCode/Vim as a part of our individual build processes.</p>

<p>The dependencies provided by Apple are the daily trade-off in order to build apps that are competitive. Apple ships a new SDK each year, developers need to ship new builds. If you can keep pace, then you can get your app in-front of millions of potentially paying customers.</p>

<a name="Leveraging.OSS"></a>
<h3>Leveraging OSS</h3>

<p>So, allow me to don my best flame-proof suit and answer the intent of the question that was originally asked of us? <em>What qualities do we look for in OSS dependencies?</em></p>

<p>This question is interesting because we're not just shipping an app in the dark, every app we have is open source and available for inspection. Our choices with OSS dependencies become our implicit public recommendations, why else would we be using them?</p>

<p>To to give the simplest TLDR; I created the <a href="https://guides.cocoapods.org/making/quality-indexes">CocoaPods Quality Indexes</a>. The Quality Indexes (QIs) are a series of metrics that are applied programmatically to every library which generate a single number that <a href="http://cocoapods.org">cocoapods.org</a> uses for search ranking. These are based on conversations within Artsy, and as many contributors as I could during the course of a year. Here are a few QIs that matter a lot to me:</p>

<ul>
<li>The library is popular, this is measured in GitHub stars.</li>
<li>Great README, has a CHANGELOG and uses internal appledoc/headerdoc.</li>
<li>The project has test coverage.</li>
</ul>


<p>If you're interested in the reasoning behind these, I'd recommend reading the <a href="https://guides.cocoapods.org/making/quality-indexes">full guide for the metrics</a>.</p>

<p>If I could determine that a project was a good dependency via code - I wouldn't be writing apps, I'd be a millionaire, who has moved on to working in politics or cryptography in Denmark. So what are the key metrics that not Turing-compatible?</p>

<a name="Can.We.Take.Over."></a>
<h4>Can We Take Over?</h4>

<p>We're a pretty versatile bunch of developers, even with our focus on native iOS development. Being able to understand a foreign codebase when debugging a problem, in order to <a href="http://dictionary.reference.com/browse/grok">grok</a> if a bug lies in our code or a libraries is essential.</p>

<p>Being blocked because you don't understand how to create an assembly trampoline for message passing on 64 bit processors sucks. Relying on someone else to provide a fix in their spare time, is a nice way to strain a relationship.</p>

<p>There have been times when we've taken over libraries completely, which has worked out well for everyone involved. Examples being <a href="https://cocoapods.org/pods/NAMapKit">NAMapKit</a> and <a href="https://cocoapods.org/pods/Specta">Specta</a>/<a href="https://cocoapods.org/pods/Expecta">Expecta</a>. It can be a matter of providing small incremental work on the project, or just being someone with a vision <a href="http://orta.io/rebase/oss-management/">for the project</a>.</p>

<a name="Features.vs.Hidden.Dependencies"></a>
<h4>Features vs Hidden Dependencies</h4>

<p>A dependency can offer you shortcuts to features, new ways to do things or a way to interface with externalities. When you look at the README you get to see all of the best parts of a library, the reasons why it's worth trying, the easy installation instructions. You don't get to see some of uglier issues under the surface, that only become exposed once you look a bit harder.</p>

<p>These can be subtle for example, using Fastlane introduces a lot of dependencies.</p>

<pre><code class="sh">~/dev/scratch ⏛  cat Gemfile
gem 'fastlane'

~/dev/scratch ⏛  bundle install
[...]
Bundle complete! 1 Gemfile dependency, 73 gems now installed.
</code></pre>

<p>There's a trade-off here, Fastlane provides a great programmable API to a bunch of really annoying time-consuming tasks. There isn't a system similar to CocoaPods' subspecs which lets a library consumer choose to use a subset of a dependency graph, so instead everyone gets <code>slack-notifier</code> regardless of if you need it.</p>

<p>ReactiveCocoa feels quite similar. In exchange for Cocoa-native approach to Functional Reactive Programming you also have:</p>

<ul>
<li>Swizzling dealloc on objects in order to do it's magic KVO-unbinding at runtime.</li>
<li>To pretty much giving up on trying to use the stack trace for understanding flow. Instead you can use their custom dtrace instrument.</li>
<li>Complicated pre-compiler macros that can get tricky to debug.</li>
</ul>


<p>These trade-offs can be happily made in exchange for ReactiveCocoa's well thought out API. Functional Reactive Programming is something that the majority of us are particularly interested in. Since Swift came out, a few Swift-only FRP libraries have been released. So we've been keeping our eyes <a href="https://cocoapods.org/?q=summary%3Areactive">on the alternatives</a>.</p>

<a name="Focus"></a>
<h4>Focus</h4>

<p>Ideally you're bringing in a dependency for one specific task. Something like <a href="https://cocoapods.org/pods/ObjectiveSugar">ObjectiveSugar</a> is a great example of a small focused library. I studied it's API when we first integrated it, and it's not really changed at all since. The library authors have done a great job of ensuring that Objective Sugar stays on-topic.</p>

<a name="Community.Relationships"></a>
<h4>Community Relationships</h4>

<p>The amount of energy you have to put into using certain dependencies, in an engaging way like we do, also means you have to interact with external people. This is often the case with OSS, so we’re used to that and quite good at it. Sometimes, however, people and their opinions don’t match, it’s a fact of life, and in these cases it can be worth choosing to not use a certain dependency.</p>

<p>One such example has been ReactiveCocoa. While they are free to make whatever decisions they like, we feel that we’ve wasted energy on supporting their dependencies in CocoaPods that took away from our already constraining time-budget. Our interactions consume and creates energy that we don't want to be associated with. This makes us want to engage less with the community at whole, which is really not something we want. So that, combined with our opinion on the framework itself (as aforementioned) means we’re looking at alternatives.</p>

<p>This contrasts sharply with working on Fastlane, where we're willing to take the dependency graph in part because working with <a href="https://krausefx.com">Felix Krause</a> is such a pleasure. We've sent PRs,  helped out on <a href="https://github.com/KrauseFx/fastlane/pull/173">documentation</a> and provided advice on how we would/are using Fastlane. I actively feel guilty that we're still not deploying to the App Store using Fastlane because of this relationship.</p>

<a name="Project.Maturity"></a>
<h4>Project Maturity</h4>

<p>We got burned by working with Swift too early, but coming back at Swift 2.0 feels good. We just started introducing Swift into our Objective-C codebases, as it's looking like the tooling has matured.</p>

<p>We spent a good chunk of time over the last 6 months discussing and testing out React Native as an approach for building apps. It's turning into an amazing platform, but for us it's not mature enough to start building apps with it as a foundation.</p>

<a name="Not.All.Dependencies.are.Third.Party"></a>
<h2>Not All Dependencies are Third Party</h2>

<p>We ship a lot of our internal code as Pods. The rubric we use for deciding on when to externalise code is "would we want this in more than 2 apps" at the moment. This is an easy choice for libraries as fundamental as a fonts, or colours schemes. It becomes a more nuanced choice when it comes to <a href="https://github.com/ashfurrow/Forgeries">a class or two</a>, or <a href="https://github.com/orta/ar_dispatch">some functions</a>.</p>

<p>Creating a library that gets popular can also turn into an unexpected time-sink, we've been supporting <a href="https://cocoapods.org/pods/ARAnalytics">ARAnalytics</a> for 4 years now and nearly all features for the last 3 years have come from external developers. Ensuring that they don't break the build, making monthly releases and keeping documentation up to date takes time. <a href="https://cocoapods.org/pods/Moya">Moya</a> has consumed multiple weekends in a row of our time.</p>

<p>Ensuring that we are good stewards for the code we release as a separate consumable library is important to our team values. We've not had to deprecate a library, though I look forwards to doing that to <a href="https://cocoapods.org/pods/ORStackView">ORStackView</a> at some point when everyone is building for iOS9+.</p>

<a name="Nuance"></a>
<h3>Nuance</h3>

<p>There are no simple answers to "should you use a certain dependency". The CocoaPods QIs can give you a sense of what libraries are worth looking into, then you can load up a demo for the library by running <code>pod try [Podname]</code> to dig around and get a feel for how the library works. These decisions end up being quite personal.</p>

<p>We work with external dependencies because we enjoy:</p>

<ul>
<li>Working with other people.</li>
<li>Making improvements for the entire community, instead of just ourselves.</li>
<li>Not having to re-invent the wheel.</li>
</ul>


<p>For us, it's nearly always win-win.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa Architecture: Dropped Design Patterns]]></title>
    <link href="http://artsy.github.io/blog/2015/08/31/Cocoa-Architecture-Dropped-Design-Patterns/"/>
    <updated>2015-08-31T20:00:00-04:00</updated>
    <id>http://artsy.github.io/blog/2015/08/31/Cocoa-Architecture-Dropped-Design-Patterns</id>
    <content type="html"><![CDATA[<p>As a part of going through the design patterns we've found in the creation of the Artsy iOS apps, I'd like to talk a bit about some of the patterns that we've had and migrated away from. This is not 100% comprehensive, as there has been a lot of time, and a lot of people involved. Instead I'm going to try and give a birds eye view, and zoom in on some things that feel more important overall.</p>

<p>It's important to preface that I don't believe in perfect code, or am I a fan of big re-writes. We can spot a bad pattern, but not do anything about it. We do have apps to ship, not a codebase to make perfect for the sake of technical purity.</p>

<!-- more -->


<hr />

<a name="NSNotifications.as.a.decoupling.method"></a>
<h2>NSNotifications as a decoupling method</h2>

<p>A lot of the initial codebase for Energy relied on using NSNotifications as a way of passing messages throughout the application. There were notifications for user settings changes, download status updates, anything related to authentication and the corresponding different error states and a few app features. These relied on sending global notifications with very little attempts at scoping the relationship between objects.</p>

<p>NSNotificationCenter notifications are an implementation of the <a href="https://en.wikipedia.org/wiki/Observer_pattern">Observer Pattern</a> in Cocoa. They are a beginner to intermediate programmer's design paradigm dream. It offers a way to have objects send messages to each other without having to go through any real coupling. As someone just starting with writing apps for iOS, it was an easy choice to adapt.</p>

<p>One of the biggest downsides of using NSNotifications are that they make it easy to be lazy as a programmer. It allows you to not think carefully about the relationships between your objects and instead to pretend that they are loosely coupled, when instead they are coupled but via stringly typed notifications.</p>

<p>Loose-coupling can have it's place but without being careful there is no scope on what could be listening to any notification. Also de-registering for interest can be a tricky thing <a href="http://stackoverflow.com/questions/tagged/nsnotification">to learn</a> and the default memory-management behavior is about to change ( <a href="https://developer.apple.com/library/prerelease/mac/releasenotes/Foundation/RN-Foundation/index.html#//apple_ref/doc/uid/TP30000742">for the better</a>.)</p>

<p>We still have a <a href="https://github.com/artsy/energy/blob/702036664a087db218d3aece8ddddb2441f931c8/Classes/Constants/ARNotifications.h">lot of notifications</a> in Energy, however in Eigen and Eidolon there are next to none. We don't even have a specific file for the constants.</p>

<a name="L.define.kARConstant"></a>
<h2>#define kARConstant</h2>

<p>Not much to say here, using <code>#defines</code> as constants was definitely <a href="https://github.com/adium/adium/blob/master/Source/AdiumAccounts.m#L24-L30">in favour</a> when I learned Objective-C. Likely a throw back from C. Using <code>#defines</code> as constants would not use on-device memory to store an unchanging value. This is because a <code>#define</code> uses the pre-compiler to directly change the source code to be the value, whereas using a static constant takes up memory space on the device, which we used to <em>really</em> care about. It's likely that a modern copy of LLVM doesn't assign on device memory unless it needs to, especially for things marked <code>const</code>. Switching to real variables means you can inspect and use in a debugger and use can rely on the type system better.</p>

<p>What this means in practice is what when we would have had something <a href="https://github.com/artsy/eigen/blob/master/Artsy/Views/Table_View_Cells/AdminTableView/ARAnimatedTickView.m#L3">like</a>: <code>#define TICK_DIMENSION 32</code> it should be <a href="https://github.com/artsy/eigen/blob/master/Artsy/View_Controllers/App_Navigation/ARAppSearchViewController.m#L11">migrated to</a> <code>static const NSInteger ARTickViewDimensionSize = 20;</code>.</p>

<a name="Sprinkling.Analytics"></a>
<h2>Sprinkling Analytics</h2>

<p>We took some of the ideas for <a href="http://albertodebortoli.github.io/blog/2014/03/25/an-aspect-oriented-approach-programming-to-ios-analytics/">Aspect oriented programming</a> with <a href="https://cocoapods.org/pods/ARAnalytics#user-content-aspect-oriented-dsl">Analytics</a>.</p>

<p>Where we used to <a href="https://github.com/artsy/energy/blob/master/Classes/Controllers/Popovers/Add%20to%20Album/ARAddToAlbumViewController.m#L271-L282">have this</a>:</p>

<pre><code class="objc">@implementation ARAddToAlbumViewController

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.row &lt; [self.albums count]) {
        Album *selectedAlbum = ((Album *)self.albums[indexPath.row]);
        ARTickedTableViewCell *cell = (ARTickedTableViewCell *)[self.tableView cellForRowAtIndexPath:indexPath];

        if ([cell isSelected]) {
            [ARAnalytics event:ARRemoveFromAlbumEvent withProperties:@{
                @"artworks" : @(self.artworks.count),
                @"from" : [ARNavigationController pageID]
            }];
            [...]
</code></pre>

<p>We would instead build something <a href="https://github.com/artsy/eigen/blob/master/Artsy/App/ARAppDelegate+Analytics.m#L69">like this</a>:</p>

<pre><code class="objc">@implementation ARAppDelegate (Analytics)

- (void)setupAnalytics
{
    ArtsyKeys *keys = [[ArtsyKeys alloc] init];
    [...]
    [ARAnalytics setupWithAnalytics: @{ [...] } configuration:
    @{
        ARAnalyticsTrackedEvents:
            @[
                @{
                    ARAnalyticsClass: ARAddToAlbumViewController.class,
                    ARAnalyticsDetails: @[
                        @{
                            ARAnalyticsEventName: ARRemoveFromAlbumEvent,
                            ARAnalyticsSelectorName: NSStringFromSelector(@selector(tableView: didSelectRowAtIndexPath:)),
                            ARAnalyticsProperties: ^NSDictionary*(ARAddToAlbumViewController *controller, NSArray *_) {
                                return @{
                                    @"artworks" : @(controller.artworks.count),
                                    @"from" : [ARNavigationController pageID],
                                };
                        },
                        [...]
                    ]
                },
                [...]
</code></pre>

<p>This gives us the ability to not sprinkle analytics code around the app in every file. It keeps the responsibilities of objects simpler and we've been happy with it in Eigen. We've not migrated it into Energy, its dependency on ReactiveCocoa brings too much additional weight. So far we've been applying analytics inline, Energy has much less need for individual analytics throughout the application. If you want to learn more about this pattern check out <a href="http://artsy.github.io/blog/2014/08/04/aspect-oriented-programming-and-aranalytics/">Aspect-Oriented Programming and ARAnalytics</a>.</p>

<a name="Class.Methods.as.the.whole.API"></a>
<h2>Class Methods as the whole API</h2>

<p>For a very long time, I preferred aesthetics of class based APIs. E.g. using only class methods instead instance methods. I think I still do. However, once you start adding tests to a project then they become a bit of a problem.</p>

<p>I'm a big fan of the idea of Dependency Injection within tests. This, roughly <em>TL:DR'd</em>, means passing in any additional context, instead of an object finding the context itself. A common case is a call to <code>NSUserDefaults</code>. It's very likely <em>not</em> the role of your class to know which <code>NSUserDefault</code>s object you're working with, but it's likely that you're making that decision in the method by doing something like <code>[[NSUserDefaults standardUserDefaults] setObject:reminderID forKey:@"ARReminderID"];</code>. Using dependency injection would be allowing that object to come from outside that method. If you're interested in a longer and better, explanation, read this great <a href="https://www.objc.io/issues/15-testing/dependency-injection/">objc.io</a> by <a href="http://qualitycoding.org/about/">Jon Reid</a>.</p>

<p>The problem with a class based API, is that it becomes difficult to inject that object. This doesn't flow well with writing simple, fast tests. You can use a mocking library to fake the class API, but that feels weird. Mocking should be used for things you don't control. You control the object if you're making the API. Having an instance'd object means being able to provide different versions with different behaviors or values, even better if you can reduce the behavior to <a href="https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/Networking/Network_Models/ARArtistNetworkModel.h">a protocol</a>.</p>

<a name="Objects.Sneakily.Networking"></a>
<h2>Objects Sneakily Networking</h2>

<p>When you have a complicated application, there can be a lot of places you can perform networking. We've had it in models, view controllers and views. Basically throwing the idea of purity in MVC out of the system. We started to recognise a pattern in eigen, we were not doing a good job of keeping our networking well abstracted. If you want to see the full story check out the <a href="https://github.com/Moya/Moya">moya/Moya README</a>.</p>

<p>One attempt to at trying to fix this pattern by creating a different type of networking client I've just referenced, <a href="https://github.com/Moya/Moya">Moya</a>.</p>

<p>The other was to abstract any networking performed into a separate object. If you've heard of Model-View-ViewModel (<a href="http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/">MVVM</a>) then this is a similar premise for networking instead of views. Network Models give us a way to abstract the networking into a set of behaviors. The extra abstraction means that you think "I want the things related to <em>x</em>" instead of "send a GET to address <em>x</em> and turn it into <em>y</em>."</p>

<p>Network models also make it extremely easy to swap behavior out in tests. In eigen, we have our asynchronous networking <a href="https://github.com/artsy/eigen/pull/575">run synchronously in tests</a> but we still use the network models to be able to provide <a href="https://github.com/artsy/eigen/blob/master/Artsy_Tests/View_Controller_Tests/Artist/ARArtistViewControllerTests.m#L29-L40">whatever data we want to expect</a> from the server in our tests.</p>

<a name="Subclassing.more.than.twice"></a>
<h2>Subclassing more than twice</h2>

<p>As projects evolve it can become very easy to subclass <em>x</em> in order to provide a "similar but a little bit different" behavior. Perhaps you need to <a href="https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/View_Controllers/Web_Browsing/ARTopMenuInternalMobileWebViewController.m#L58">override some methods</a>, or add a <a href="https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/View_Controllers/Web_Browsing/AREndOfLineInternalMobileWebViewController.h#L5">specific behavior</a>. Like the <a href="http://ezinearticles.com/?The-Boiled-Frog-Phenomenon&amp;id=932310">urban myth</a> of a frog being slowly boiled, you end up with a difficult to understand codebase as expected behavior mutates depending on how deep the hierarchy goes.</p>

<p>One pattern for handling this is <a href="http://stackoverflow.com/questions/9710411/ios-grasping-composition">class composition</a>. This is the idea that instead of having one object do multiple things, you allow a collection of objects to work together. Providing more space for each object to conform to the Single Responsibility Principle (<a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">SRP</a>.) If you're interested in this, you may also be interested in the <a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/ClassClusters/ClassClusters.html">class clusters</a> pattern.</p>

<p>A good example of this comes <a href="https://github.com/artsy/energy/blob/aa97d90cf37932d4c0f49ea4c4d31f7e491f16a6/Classes/Controllers/Top%20View%20Controller/ARTopViewToolbarController.m">from Energy</a>, our root view controller <code>ARTopViewController</code> used to control its own toolbar items. Over 4 years this became difficult to manage, and a lot of extra code in the view controller. By abstracting out the implementation details of managing the toolbar items into it's <a href="https://github.com/artsy/energy/blob/aa97d90cf37932d4c0f49ea4c4d31f7e491f16a6/Classes/Controllers/Top%20View%20Controller/ARTopViewToolbarController.m">own class</a> we were able to allow the <code>ARTopViewController</code> to state what it wanted by not how it was done.</p>

<a name="Configuration.Classes.over.Inter-Class.Communication"></a>
<h2>Configuration Classes over Inter-Class Communication</h2>

<p>A one of the most important aspects of Energy is to <a href="http://folio.artsy.net">email artworks</a>. So there is a lot of code around configuring the email you want to send, and then generating HTML from those settings. This started out pretty simple as we had very few app-wide settings. Over time, deciding what we need to show in terms of settings and how they affected the email became very complicated.</p>

<p>The part that eventually became a strong enough code-smell to warrant a re-write was the view controller which allowed a partner to choose what information to send would pass details individually to an object that would generate the HTML. I found it difficult to write simple tests for the class' behavior. Initially I would mock the email composer, then inspect the methods that were called. This felt wrong, as you shouldn't really be mocking classes you own. Given the importance of the functionality that classes provide our application, ideas on ways to improve the section of code stayed on my mind for a long time.</p>

<p>The fix came to me during Justin Searls' talk <a href="https://speakerdeck.com/searls/sometimes-a-controller-is-just-a-controller">Sometimes a Controller is Just a Controller</a> - specifically slide <a href="https://speakerdeck.com/searls/sometimes-a-controller-is-just-a-controller?slide=55">55</a>. Justin talks about objects that <em>either hold and describe a value or perform useful behavior, never both</em>.</p>

<p>I took this advice and re-evaluated the relationship between settings view controller and composer object. Before the change, the settings view controller would configure the composer directly. Now, the settings view controller creates a configuration object and the composer consumes it. This made it <em>significantly</em> easier to write tests for both objects, as they have very obvious inputs and outputs in the form of a <a href="https://github.com/artsy/energy/blob/aa97d90cf37932d4c0f49ea4c4d31f7e491f16a6/Classes/Util/Emails/AREmailSettings.h">AREmailSettings</a>. The <a href="https://github.com/artsy/energy/blob/aa97d90cf37932d4c0f49ea4c4d31f7e491f16a6/ArtsyFolio%20Tests/Util/AREmailComposerTests.m">AREmailComposerTests</a> in particular become much more elegant.</p>

<a name="Direct.use.of.Responder.Chain"></a>
<h3>Direct use of Responder Chain</h3>

<p>Before I worked at Artsy, I was a <a href="http://i.imgur.com/Am9LjED.gif">Mac developer</a>, I've been doing that since before iOS existed, so this influences my code style. One of the great parts of the Cocoa toolchain is the <a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/event_delivery_responder_chain/event_delivery_responder_chain.html">responder chain</a>, a well documented way of passing methods up a known chain of objects. It solves a common problem with complicated view structures. You could have a button that is generated at runtime deep inside a view hierarchy and you would like the view controller to handle it being tapped. You could use a long chain of delegate methods, or use a <a href="https://twitter.com/unimp0rtanttech/status/555828778015129600">private method</a> to get the reference to the view controller instance. On the Mac usage of the responder chain is a common pattern, on iOS it is used rarely.</p>

<p>We have this problem with our Artwork view controller in Eigen. There are buttons that are many <a href="https://speakerdeck.com/orta/ios-at-artsy?slide=38">stack views deep</a> that need to pass a message back to the view controller. When we first hit this the issue I immediately used the responder chain, you write a <a href="https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/Views/Artwork/ARArtworkActionsView.m#L85">line of code</a> like: <code>[bidButton addTarget:self action:@selector(tappedBidButton:) forControlEvents:UIControlEventTouchUpInside];</code> where the <code>self</code> is referring to the view. This would send the message <code>tappedBidButton:</code> up the responder chain where it is reacted upon by the <a href="https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/View_Controllers/Artwork/ARArtworkViewController+ButtonActions.m#L114">ARArtworkViewController</a>.</p>

<p>I had to explain the premise of the responder chain to almost everyone touching this area of the code base. This is great in terms of the <a href="https://xkcd.com/1053/">"lucky 10,000"</a> but  means that the pattern is unintuitive to those who have not previously heard of it. There was one more issue, the lack of coupling means that renaming selectors via refactoring can break the chain.</p>

<p>The way that we reduced the cognitive load was via a protocol, all of the actions that the responder chain will use are mapped inside <a href="https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/Views/Artwork/ARArtworkActionsView.h#L10-L20">ARArtworkActionsViewButtonDelegate</a>-like protocols. It's a bit of a white-lie given that there is no direct relationship using the protocol in the app, but it makes the relationship more obvious. We use a class extension that <a href="https://github.com/artsy/eigen/blob/e19ac594bf6240d076e8092d9c56e9876c94444e/Artsy/View_Controllers/Artwork/ARArtworkViewController+ButtonActions.h#L11">conforms to these types of protocols</a> to keep the actions all kept in one place.</p>

<a name="Wrap-up"></a>
<h3>Wrap-up</h3>

<p>There are many design patterns, and they all come with trade-offs. Over time, our opinions on what is "good code" changes, this is great. It's important that as developers we understand that being able to change our minds is one of the most vital skills we have in our toolchain. This means being open to opinions outside of your usual sphere of influence and to maybe bring some good ideas from them. It's great to be passionate about an aspect of how we craft applications, but from my perspective, the best programmers choose pragmatism over idealism.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa Architecture: Hybrid Apps]]></title>
    <link href="http://artsy.github.io/blog/2015/08/23/Cocoa-Architecture-Hybrid-Apps/"/>
    <updated>2015-08-23T20:00:00-04:00</updated>
    <id>http://artsy.github.io/blog/2015/08/23/Cocoa-Architecture-Hybrid-Apps</id>
    <content type="html"><![CDATA[<p>As a part of going through the design patterns we've found in the creation of the Artsy iOS apps, I'd like to talk a bit about <em>Hybrid Applications</em>. A hybrid application refers to an app that uses native code and web content intertwined. Our flagship iOS app, <a href="https://github.com/artsy/eigen">eigen</a> is a hybrid app, and it seems to get more and more hybrid-y each release. Let's talk a little bit about the pros and cons of this approach.</p>

<!-- more -->


<hr />

<a name="What.is.a.Hybrid.App"></a>
<h1>What is a Hybrid App</h1>

<p>Above is the widest possible definition above, so let's dig in as this can be a contentious. There is a whole spectrum of which an app can be classed as a hybrid app. This ranges from more or less web-tech everywhere to 100% native code like Objective-C / Swift.</p>

<p>A great example of the furthest to the web-side is <a href="https://atom.io">ATOM</a>, the text editor. It's on the extreme side because all of the user interface is built using HTML + CSS, and almost all of the app is in javascript. The trade-off for them is that their developers can easy write cross-platform code, that will work reliably with technology that the vast majority of programmers use. This vastly reduces the barrier to entry for contributors and gives ATOM a really large community of programmers to draw from with respect to extending the app.</p>

<p>An example of a purely native application would be <a href="https://github.com/artsy/energy/">Energy</a>. It's over a hundred thousand plus lines of Objective-C. Yet under the hood, there's definitely some web-tech there. Prior to iOS7 <code>UILabel</code>s, <code>UITextField</code>s and <code>UITextField</code>s <a href="http://www.objc.io/issues/5-ios7/getting-to-know-textkit/">used WebKit for rendering</a>. Not to mention that when a Partner sends an email via Energy, the editor is a <code>UIWebView</code>. However, from the app developer's perspective they are creating native interactions that are consistent with the rest of the operating system's behavior.</p>

<a name="Eigen"></a>
<h1>Eigen</h1>

<p>When we started building Eigen, it was very obvious that we had a Sisyphean task ahead of us. We wanted to take the core ideas of the Artsy website,  <em>The Art World Online</em>, and convert it into mobile, <em>The Art World in Your Pocket</em>.</p>

<p>That's not impossible, but the mobile team was a fraction of the Artsy development team. Any new features added to the website would need a mobile equivalent, and given the speed in which web developer's can ship, we'd need to outnumber them to stand a chance at keeping up.</p>

<p>So, we opted for building a highly integrated mobile website at the same time, it would use the same design language as the iOS app and can act as a way for Android devices to access Artsy.</p>

<a name="Techniques.for.Doing.It.Well"></a>
<h1>Techniques for Doing It Well</h1>

<p>So we'll be talking about our <a href="https://github.com/artsy/eigen/blob/6bb44a01c1b23fb8e92c645c3091fd33725743c3/Artsy/View_Controllers/Web_Browsing/ARInternalMobileWebViewController.m">ARInteralMobileViewController</a> - which currently relies on <code>UIWebView</code> but is in <a href="https://github.com/artsy/eigen/pull/606">the process of</a> migrating to <code>WKWebkit</code>.</p>

<ul>
<li><p>Scroll like an <a href="https://github.com/artsy/eigen/blob/6bb44a01c1b23fb8e92c645c3091fd33725743c3/Artsy/View_Controllers/Web_Browsing/ARExternalWebBrowserViewController.m#L39">iOS app</a> by setting the web view's <code>scrollView.decelerationRate = UIScrollViewDecelerationRateNormal</code>.</p></li>
<li><p>Use a simple design language to avoid the <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/UncannyValley">uncanny valley</a>. Care about using the same <a href="https://github.com/artsy/Artsy-UILabels">typographical rules</a> on everything including tabs, buttons and switches.</p></li>
<li><p>Take over navigation. This means pushing a <a href="https://github.com/artsy/eigen/blob/6bb44a01c1b23fb8e92c645c3091fd33725743c3/Artsy/View_Controllers/Web_Browsing/ARInternalMobileWebViewController.m#L180">new view controller</a> on the navigation stack every time a user intends to change context.</p></li>
<li><p>Take over common OS features. We take over <a href="https://github.com/artsy/eigen/blob/master/Artsy/View_Controllers/Web_Browsing/ARInternalMobileWebViewController.m#L184-L190">social sharing</a>  instead of letting the web site send you to an external page, offering a native share sheet instead.</p></li>
</ul>


<a name="Downsides"></a>
<h1>Downsides</h1>

<p>When you choose developer ease over user experience it's important to take into consideration some of the downsides.</p>

<ul>
<li><p>Localisation is difficult. Cocoa offers a great localisation APIs. We can't use them, otherwise half of our app is correctly localised and the rest isn't.</p></li>
<li><p>Conforming to the operating system's Human Interface Guidelines is difficult, as you're relying less on foundations built with this in mind.</p></li>
<li><p>Web tech is slower, and threading APIs are generally poor. A difficulty here is that you are also complicating the technical stack upon which your app sits above. When relying on web-tech in a Mac app, it's common for that trade-off to show itself in excessive memory usage over time.</p></li>
</ul>


<a name="Evolution"></a>
<h1>Evolution</h1>

<p>One of the most interesting developments this year in the Cocoa world is Facebook's <a href="https://cocoapods.org/pods/React">react-native</a>, a bridge between web technology and native code that doesn't rely on using the <a href="http://www.quirksmode.org/dom/intro.html">traditional DOM</a> - freeing it from a lot of the common problems found in highly web-based apps.</p>

<p>We're pretty optimistic about it on the mobile team. We're not quite willing to jump head-first into a <a href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">pre-1.0 technology</a> again, but it shows a lot of promise.</p>

<p>The fact that we were able to ship an app at all was because we could build the parts that meant the most to us native, then rely on web technologies to cover the rest of the ground. By being pragmatic in our approach to using web tech, we have the chance to stand on the shoulders of giants.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa Architecture: ARSwitchboard]]></title>
    <link href="http://artsy.github.io/blog/2015/08/18/Cocoa-Architecture-Switchboard-Pattern/"/>
    <updated>2015-08-18T20:00:00-04:00</updated>
    <id>http://artsy.github.io/blog/2015/08/18/Cocoa-Architecture-Switchboard-Pattern</id>
    <content type="html"><![CDATA[<p>As a part of going through the design patterns we've found in the creation of the Artsy iOS apps, I'd like to introduce the Switchboard pattern. This evolved quite naturally out of <a href="/blog/2015/08/15/Cocoa-Architecture:-Router-Pattern/">ARRouter</a> when applied to generating view controllers instead of API requests.</p>

<!-- more -->


<hr />

<a name="Where.we.started"></a>
<h1>Where we started</h1>

<p>In what must be one of my best named commits, <code>b9ff28</code> aka <em>"CREATING THE VOID"</em> introduced an <code>ARSwitchboard</code> to Eigen. Aside from this being the commit where I could finally write <code>[ARVoidViewController theVoid]</code> it added support for tapping an Artwork on the home-screen and going to another view controller.</p>

<p>We knew up-front that we needed to emulate the website's URL schemes, so we needed to come up with a way to support two ways of loading up a view controller. Here's what it looked like:</p>

<pre><code class="objc">@implementation ARSwitchBoard

+ (void)setupRouter {
    artsyHosts = [NSSet setWithObjects:@"art.sy", @"artsyapi.com", @"artsy.net", nil];

    [RCRouter map:@"/artwork/:id" to:self with:@selector(loadArtworkFromURL:)];
}

+ (void)navigateToURL:(NSURL *)url {
    if([self isInternalURL:url] &amp;&amp; [RCRouter canRespondToRoute:url.path]) {
        [RCRouter dispatch:url.path];
    } else {
//        [self openInternalBrowser:url];
    }
}

+ (BOOL)isInternalURL:(NSURL *)url {
    NSString * host = url.host;
    if(host &amp;&amp; [host hasPrefix:@"www"]) {
        host = [host substringFromIndex:3];
    }

    return (host &amp;&amp; [artsyHosts containsObject:host]);
}

#pragma mark -
#pragma mark Artworks

+ (void)loadAttachmentCollection:(AttachmentCollection *)collection {
    [[ARVoidViewController theVoid] loadArtworkViewWithAttachmentCollection:collection];
}

+ (void)loadArtwork:(Artwork *)artwork {
    AttachmentCollection * collection = [AttachmentCollection collectionWithItems:@[artwork] andIndex:0];
    [self loadAttachmentCollection:collection];
}

+ (void)loadArtworkFromURL:(NSDictionary *)options {
    [[ARVoidViewController theVoid] loadArtworkViewWithID:options[@"id"]];
}

@end
</code></pre>

<p>It shows the pattern's humble origins quite well. The <code>ARSwitchboard</code> provides an API that any object can call, and it will handle presenting the view controller. Offering an API that can either use arbitrary URLs or model objects.</p>

<a name="Where.the.pattern.evolved"></a>
<h2>Where the pattern evolved</h2>

<p>I initially wrote this during my "Class methods look prettier" stage. Our <code>ARSwitchboard</code> has evolved into using instance methods, and it uses a sharedInstance. This makes writing tests for the routing extremely simple for <a href="https://github.com/artsy/energy/blob/master/ArtsyFolio%20Tests/Util/ARSwitchboardTests.m">easy use cases</a>, and possible <a href="https://github.com/artsy/eigen/blob/2eb00a8050a69ab2e05ffeb11a2bbdcbadf9fb7e/Artsy_Tests/App_Tests/ARSwitchBoardTests.m">for the complex</a>.</p>

<p>The pattern was established pretty well by the time it was integrated <a href="https://github.com/artsy/energy/blob/a35969d232d8309fd2aedaae35f2dbdf6d505004/Classes/Util/App/ARSwitchBoard.m">into Energy</a>. Some of it's highlights are:</p>

<ul>
<li><p>The sharedInstance is <a href="https://github.com/artsy/energy/blob/a35969d232d8309fd2aedaae35f2dbdf6d505004/Classes/Util/App/ARSwitchBoard.m#L20-L31">set up</a> with some of the other singletons, from that point on it only acts on properties it owns.</p></li>
<li><p>It deals with setting up entire <a href="https://github.com/artsy/energy/blob/a35969d232d8309fd2aedaae35f2dbdf6d505004/Classes/Util/App/ARSwitchBoard.m#L229-L259">view hierarchies</a>. Not just pushing another view on to a <code>UINavigationController</code>.</p></li>
</ul>


<a name="Internal.Routing"></a>
<h2>Internal Routing</h2>

<p>We try to make all view controllers that could represent a URL have two initializers; one that accepts a full model object and another that works off an ID. This means that we can provide as much context as we can initially, but can generate everything at runtime if you've come from a push notification or from another app.</p>

<p>We use an internal routing tool to do the heavy-lifting here, currently this is <a href="https://cocoapods.org/pods/JLRoutes">JLRoutes</a> which we use to map URLs to blocks and dictionaries.</p>

<a name="Difficulties"></a>
<h2>Difficulties</h2>

<p>With Eigen we're trying to map the whole data-set of Artsy into a single app, which likely an architecture post of it's own. However, one of the issues we're having that really strains this metaphor is ambiguity in the routing system. For us this crops up in two places:
- The URL <a href="https://github.com/artsy/eigen/pull/534">routing structure</a> you're mapping against can change.
- When one route could have <a href="https://github.com/artsy/eigen/blob/2eb00a8050a69ab2e05ffeb11a2bbdcbadf9fb7e/Artsy/App/ARSwitchBoard.m#L156">many types</a> of data.</p>

<p>Handling routes that changes is something we ended up building an <a href="https://github.com/artsy/echo/blob/master/app/api/v1/presenters/route_presenter.rb">API for</a>. It provides a JSON package of routes and names, and Eigen updates its routing internally.</p>

<p>Having one route represent multiple <em>potential</em> view controllers is tricky. We didn't want to introduce asynchronicity to the <code>ARSwitchboard</code>, so we use <a href="https://github.com/artsy/eigen/blob/2eb00a8050a69ab2e05ffeb11a2bbdcbadf9fb7e/Artsy/View_Controllers/Fair/ARProfileViewController.m#L55-L66">polymorphic view controllers</a>. This is a technique where the view controller returned then looks deeper into what it is representing and using child view controllers, embeds the true view controller inside itself.</p>

<a name="Future"></a>
<h2>Future</h2>

<p>Like all patterns, our <code>ARSwitchboard</code> pattern is evolving. With Eigen we have  a complicated navigation stack, due to supporting app-wide tabs and hosting navigation controllers inside view controllers. This adds additional logic to pretty complicated code when we're dealing with URLs that could be root elements of a tab. So we are planning to eventually move the presentation aspect of the <code>ARSwitchboard</code> into a separate object.</p>

<a name="Alternatives"></a>
<h2>Alternatives</h2>

<p>We didn't need an <code>ARSwitchboard</code> in Eidolon. Which, so far always seems to be the exception in these architecture pattern posts. Instead we opted for Apple's <a href="http://www.objc.io/issues/15-testing/dependency-injection/#which-di-framework-should-i-use">Dependency Injection tool</a>, Interface Builder + Storyboards. Energy pre-dates Storyboards, and they didn't feel like a good fit for Eigen.</p>

<p>We found storyboards to be a really good replacement to this pattern when you have an established series of steps in your application with some well defined connections.</p>

<p>As an example, our on-boarding process for Eigen probably should have been storyboarded, as it's a series of view controllers pushed incrementally. However given that the rest of Eigen is essentially a web of interconnected view controllers, we'd be abusing the tool.</p>

<a name="Wrap.up"></a>
<h2>Wrap up</h2>

<p>So the Switchboard is a way that we've managed to contain some of the complexity around having web-like abilities to jump between any two view controllers. This pattern makes it easy to stub a switchboard in tests, and to easily test the routing itself.</p>

<p>When I looked through some of the other open source iOS apps to compare the pattern, I couldn't find anything similar. So if you do have something similar, you should probably Open Source your app ;)</p>
]]></content>
  </entry>
  
</feed>

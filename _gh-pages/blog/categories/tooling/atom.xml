<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tooling | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/tooling/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2017-09-10T21:04:34-04:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On our implementation of React Native]]></title>
    <link href="http://artsy.github.io/blog/2016/08/24/On-Emission/"/>
    <updated>2016-08-24T12:17:00-04:00</updated>
    <id>http://artsy.github.io/blog/2016/08/24/On-Emission</id>
    <content type="html"><![CDATA[<center>
 <img src="/images/emission/emission-logo-artsy.svg" style="height:300px;">
</center>


<p>I arrived fashionably late to the <a href="/blog/2016/08/15/React-Native-at-Artsy/">React Native party</a> in Artsy. I had been a part of our <a href="/blog/2016/08/09/the-tech-behind-live-auction-integration/">Auctions Team</a>, where we worked in Swift with <a href="https://cocoapods.org/pods/Interstellar">some light-FRP</a>. We were not affected by the 4 months of simultaneous work on moving to React Native, at all.</p>

<p>It was a quiet revolution. I did not have to install <code>npm</code>, I made zero changes to the code for auctions and the whole app's infrastructure barely changed. Yet we moved to making all new code inside our 3 year old iOS app use React Native. What gives?</p>

<p>Well, first up we weren't planning a re-write, we don't have that kind of luxury and the scope of our app is too big compared to the team working on it. Second, we reused existing dependency infrastructure to support JavaScript based apps. Read on to find out what that looks like.</p>

<!-- more -->


<a name="Why.we.were.in.a.good.position.to.do.this"></a>
<h3>Why we were in a good position to do this</h3>

<p>Let's talk a little about the Artsy flagship app, <a href="https://github.com/artsy/eigen/">Eigen</a>. It's an app that aimed to comprehensively cover the art world. From <a href="https://www.artsy.net/shows">Shows</a> to <a href="https://www.artsy.net/galleries">Galleries</a>, <a href="https://www.artsy.net/art-fairs">Fairs</a> to <a href="https://www.artsy.net/auctions">Auctions</a>, <a href="https://www.artsy.net/institutions">Museums</a> to <a href="https://www.artsy.net/articles">Magazines</a>.</p>

<p>It all looks a bit like this:</p>

<p></div></div><a href='/images/emission/eigen-overview.jpg'><img src="/images/emission/eigen-overview.jpg"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Our app neatly splits into two areas of view controllers, ones that act as a browser chrome, and individual view controllers that normally map 1:1 to <a href="https://github.com/artsy/eigen/blob/master/Artsy/App/ARSwitchBoard.m#L122">routes</a> on the Artsy website.</p>

<p>For example, the route <code>artsy.net/artwork/glenn-brown-suffer-well</code> maps to the native <code>ARArtworkViewController</code>.</p>

<p></div></div><a href='/images/emission/eigen.svg'><img src="/images/emission/eigen.svg"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Just as a browser knows very little about the individual content of the pages that it's rendering, the eigen chrome exists <em>relatively</em> independent of the view controllers that are showing.</p>

<p>Each view controller also knows very little about each-other, so actions that trigger a new view controller are generally done by creating a string route and passing it through the routing system. I've wrote about this pattern in <a href="https://artsy.github.io/blog/2015/08/15/Cocoa-Architecture-Router-Pattern/">Cocoa Architecture: Router Pattern</a>.</p>

<p>Interestingly, if the router cannot route a view controller, it will pass through to a web view. This is why we consider the app a <a href="http://artsy.github.io/blog/2015/08/24/Cocoa-Architecture-Hybrid-Apps/">hybrid app</a>. This pattern means adding new view controllers is extremely easy.</p>

<a name="Introducing.Emission"></a>
<h3>Introducing Emission</h3>

<p>Emission is what we use to contain all of our React Native components. Our flagship app Eigen, can depend on and use without needing to bother with the implementation details of React Native. At it's core, Emission is:</p>

<ul>
<li>A node module.</li>
<li>A CocoaPod.</li>
<li>An iOS App.</li>
</ul>


<a name="The.Node.Module"></a>
<h4>The Node Module</h4>

<p>Emission itself, is a node module. In our case, it is a JavaScript library that exposes 3 JavaScript objects.</p>

<pre><code class="javascript">/* @flow */
'use strict';

import Containers from './lib/containers';
import Components from './lib/components';
import Routes from './lib/relay/routes';

import './lib/relay/config';
import './lib/app_registry';

export default {
  Containers,
  Components,
  Routes,
};
</code></pre>

<p>Another node project can have Emission as a dependency - then can access our <code>Container</code>s, <code>Component</code>s and <code>Route</code>s. A container is a <a href="https://facebook.github.io/relay/docs/api-reference-relay-container.html">Relay container</a>, a component is a <a href="https://facebook.github.io/react/docs/component-api.html">React Component</a> and a Route is a <a href="https://facebook.github.io/relay/docs/guides-routes.html#content">Relay Route</a>.</p>

<p>The thing that's interesting from the integration side, is that each <code>Container</code> is effectively a View Controller that Emission provides to a host application. React Native ignores  the concept of view controllers from the Cocoa world, so we have an <a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Pod/Classes/ViewControllers/ARComponentViewController.m">ARComponentViewController</a> which is subclassed for each exposed <code>Component</code> class.</p>

<a name="The.iOS.App"></a>
<h4>The iOS App</h4>

<p>The iOS app acts as a host target for the CocoaPod, and provides an instance of an <a href="https://github.com/artsy/emission/blob/master/Pod/Classes/Core/AREmission.m">AREmission</a> object to the view controllers using React Native. The app is nothing special, it is the default app that is created using <code>pod lib create</code>. We then <a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Example/Podfile">use CocoaPods</a> to bring in React from inside the <code>node_modules/</code> folder the Emission node module creates.</p>

<p>The <code>AREmission</code> instance is the intermediary between the host-app (<a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Example/Emission/AppDelegate.m#L56">The Emission Example app</a>, or <a href="https://github.com/artsy/eigen/blob/41b00f6fe497de9e902315104089370dea417017/Artsy/App/ARAppDelegate%2BEmission.m">Eigen</a>.) It has an API for handling routing, and passing authentication credentials into the React Native world.</p>

<p>We use the example app to do development inside React Native. As of right now, it is simply a tableview that provides a list of view controllers <a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Example/Emission/AppDelegate.m#L159-L169">that represent an exposed Container</a>. Once you are in the right view controller, you can rely on <a href="http://facebook.github.io/react-native/releases/0.31/docs/debugging.html#automatic-reloading">Hot Reloading</a> to simplify your work.</p>

<a name="The.Pod"></a>
<h4>The Pod</h4>

<p>An important part of working with React Native, is that you can choose to use native code when appropriate. The <a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Emission.podspec">Pod for</a> Emission, created entirely in Objective-C, provides:</p>

<ul>
<li>Communication between React Native and the host app objects via <a href="https://facebook.github.io/react-native/docs/native-modules-ios.html">native modules</a>.</li>
<li><code>UIViewController</code> subclasses for Host apps to consume.</li>
<li>Bridges for existing native views (like our <a href="https://github.com/artsy/extraction/blob/d6a32186f7098eb2ec5d05e2fb5302a8378eff70/Extraction/Classes/ARSwitchView.m">SwitchView</a>) into React Native.</li>
</ul>


<p>The choice of Objective-C is for simplicity, and language stability. Swift is technically an option, but it's not  worth the complications for <a href="https://github.com/artsy/emission/tree/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/Pod/Classes">a few simple objects</a>.</p>

<p>In order to share native views with our host app, Eigen, we created a library to just hold the shared UI components, <a href="https://github.com/artsy/extraction">Extraction</a>. These are <a href="https://github.com/artsy/extraction/tree/d6a32186f7098eb2ec5d05e2fb5302a8378eff70/Extraction/Classes">factored out of Eigen</a>, and into a pod. Emission and Eigen have this as a dependency.</p>

<a name="Pod.Deployment"></a>
<h4>Pod Deployment</h4>

<p>What makes this work well, from the perspective of Eigen is that the React Native comes in atomically. The Podspec <a href="https://github.com/artsy/emission/blob/master/Emission.podspec#L17-L18">references</a> the few native classes, and a single JavaScript file.</p>

<p>This JavaScript file is the bundled version of all our React Native code. It's <a href="https://github.com/artsy/emission/blob/eb9d0f6ca0edd3eb9f07dd9ff3b8499f095bc45b/package.json#L7">updated  by running</a> <code>npm run bundle</code>. This generates both the minified JS, and a source map so that we can transcribe the error reports into the code we write.</p>

<p>Using the CocoaPod, Emission can provide native view controllers that use React Native under the hood. The host app does not need to know the underlying details like <code>npm</code>.</p>

<a name="On.Emission"></a>
<h3>On Emission</h3>

<p>Whether this is a pattern other apps can follow is hard to say, we were in a great position to do this. Our app has view controllers that have very little communication with each other and the host app does not need to bridge large amounts of information.</p>

<p>As ever, our work is open source, and we ensure that anyone can download and run Emission, so if you'd like to understand more, clone <a href="https://github.com/artsy/emission#reactions--emissions">artsy/emission</a> and study the implementation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using VS Code for JavaScript]]></title>
    <link href="http://artsy.github.io/blog/2016/08/15/vscode/"/>
    <updated>2016-08-15T22:17:00-04:00</updated>
    <id>http://artsy.github.io/blog/2016/08/15/vscode</id>
    <content type="html"><![CDATA[<center>
 <img src="/images/vscode/vscode_logo_artsy.svg" style="width:300px;">
</center>


<p>I'm an old school TextMate user, who has also been using Xcode for the last decade. These two sit at a very opposite ends of an "editor" spectrum.</p>

<p>TextMate is extremely bare bones at the core, but introduced the idea of bundles as plugins. Making it really easy for others to build their own plugins for their own contexts. Xcode on the other-hand includes a 3D scene editor, the best interface builder I've seen, super rich debugging tools and close to zero support for improving it yourself.</p>

<p>As we agreed on moving to React Native, we needed to decide what the team should use for <a href="https://github.com/artsy/emission/blob/master/docs/vscode.md">working in that environment</a>. After experimentation with many editors, we decided on Microsoft's <a href="https://code.visualstudio.com/">Visual Studio Code</a>.</p>

<p>We wanted to keep a lot of the best features from Xcode, while working in a completely JavaScript environment. For example: debuggers, inline errors, auto-complete, symbol mapping and to ideally have them all inside a single editor.</p>

<p>Let's dig into the principals of how Visual Studio Code works, what makes it a better option for us, and what parts of it really shine.</p>

<!-- more -->


<hr />

<a name="What.is.Visual.Studio.Code."></a>
<h3>What is Visual Studio Code?</h3>

<p>Visual Studio Code (VS Code) is <em>yet another</em>, JavaScript-based text editor. It's built atop of GitHub's <a href="http://electron.atom.io">Electron</a>. Electron is a framework for writing native apps as easy as building websites. It started as a web component for some Microsoft web-service, and eventually evolved into a fully-fledged text editor.</p>

<a name="IDE.-.Editor.hybrid"></a>
<h4>IDE - Editor hybrid</h4>

<p>Visual Studio Code (VS Code) believes that the sweet-spot between and IDE and a plain Text Editor, is somewhere a little bit closer to the IDE side.</p>

<p></div></div><a href='/images/vscode/editors.png'><img src="/images/vscode/editors.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>This means instead of the Text-Editor style folder based approach, VS Code expects to set up a project structure per-project to start supporting from of the more useful IDE-like features.</p>

<p>It supports TextMate style plugins (called Extensions) through a controlled, but expanding <a href="https://code.visualstudio.com/docs/extensions/overview">extension API</a>. The extension API work takes an <a href="https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingXPCServices.html">Apple-like</a> approach to ensuring stability by having all extensions run outside of the host process. <a href="https://code.visualstudio.com/docs/extensions/our-approach">This approach</a> ensures any extension crash does not take down the editor.</p>

<p>It's also smart about deciding when to load an extension, for example, my <a href="https://marketplace.visualstudio.com/items?itemName=Orta.vscode-danger">Danger</a> extension will <a href="https://github.com/orta/vscode-danger/blob/a21ccc101b2b1c1be595b10565bca9c88242fb6f/package.json#L18-L20">only load</a> if there is a <code>Dangerfile</code> in the root of the workspace.</p>

<p>These two approaches to extensions are specifically aimed at <a href="https://discuss.atom.io/t/why-is-atom-so-slow/11376">addressing issues</a> seen inside Atom, where any user actions can be / are blocked by extensions, and extensions have full-reign to make any change they want. Even on my Mac Pro, there is a noticable lag. I initially assumed this was the "JavaScript tax" for all Electron apps, but VS Code is fast.</p>

<a name="Making.Intellisense"></a>
<h3>Making Intellisense</h3>

<p>By default a JavaScript project does not have a way to provide auto-completion, or in VS Code's terminology: Intellisense. Trying to make auto-complete based on a <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a> can only get you so far, because it has to be wary against functions with side-effects. Other alternatives are to build an <a href="http://jointjs.com/demos/javascript-ast">AST</a> from the code, and then introspect that.</p>

<p>In Xcode the auto-complete tools are powered by the type systems of Objective-C and Swift. This means that you can know the structure of an object, without having to dig inside it, potentially breaking it in the process. Vanilla JavaScript does not have a type system. There are a few root classes though: String, Object, Number etc.</p>

<p>To work around this problem, VS Code uses <a href="http://www.typescriptlang.org">TypeScript</a> behind the scenes. TypeScript is a language that compiles down to JavaScript which provides a typing structure on top of JavaScript. This is a similar approach to how <a href="https://flowtype.org">Flow works</a> too, which is the language <a href="https://github.com/artsy/emission/pull/220">we write React Native</a> in.</p>

<p>This can work out really well for your own classes if you are declaring your types, but the npm ecosystem is <em>full</em> of untyped JavaScript, and a lot of your work is about sitting atop those abstractions. The fix for this is offered via <a href="http://definitelytyped.org">DefinitelyTyped</a> which provides type definitions for popular npm modules. For example here is <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/redux/redux.d.ts">one for Redux</a> - these act like <a href="https://github.com/artsy/eigen/blob/master/Artsy/App/ARSwitchBoard.h">header files in Objective-C</a> - offering inline documentation, and the shape of the object.</p>

<p>I use an extension to keep these up to date and to have them installed in every project I work in: <a href="https://marketplace.visualstudio.com/items?itemName=jvitor83.types-autoinstaller">Types auto installer</a>. Here's an example of auto-complete for <a href="http://redux.js.org/docs/api/Store.html">a Redux store</a>.</p>

<p></div></div><a href='/images/vscode/redux.png'><img src="/images/vscode/redux.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>It'll also provide information about the parameters, which is a life-saver for me. Having grown up with <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html">named</a> <a href="https://robots.thoughtbot.com/ruby-2-keyword-arguments">parameters</a>.</p>

<p></div></div><a href='/images/vscode/redux-params.png'><img src="/images/vscode/redux-params.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<a name="Runtime"></a>
<h3>Runtime</h3>

<p>Using console logs to debug isn't an acceptable answer when debugging for me anymore. <a href="http://blog.cleancoder.com/uncle-bob/2016/07/27/TheChurn.html">That's churn</a> that I'm not willing to lose time to. Luckily for me, VS Code supports debugging across many languages.</p>

<p>It does this by having a generic VS Code <a href="https://code.visualstudio.com/docs/extensions/example-debuggers">Debug Protocol</a> which lets extensions use their own processes to run the debugger. So the ruby debugger runs on the <a href="https://github.com/rubyide/vscode-ruby#debugger"><code>ruby-debug-ide</code></a> gem, and for node-based projects it uses the debugger built into node.</p>

<p>So, here is a common case. I want to start up my web-server, so I need to run <code>npm dev</code>. I can run this from VS Code:</p>

<p></div></div><a href='/images/vscode/start.png'><img src="/images/vscode/start.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Once that's running - I can attach a debugger. This is listing all of the available node processes on my computer:</p>

<p></div></div><a href='/images/vscode/attatch.png'><img src="/images/vscode/attatch.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Then I can add a breakpoint, and when it is triggered, I have a full stack trace and REPL. The REPL is very barebones, for example - there's no auto-complete. However, it's good for quick exploration. I keep <a href="https://www.objc.io/issues/19-debugging/lldb-debugging/#printing-objects">accidentally prefixing</a> my REPL code with <code>po</code>.</p>

<p></div></div><a href='/images/vscode/debug.png'><img src="/images/vscode/debug.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>The breakpoint works through a <a href="http://blog.teamtreehouse.com/introduction-source-maps">source map</a>, and so the line you expect is the one that you're working in. That stuff is all pretty magic to me. Good on Microsoft, and the node community for pulling that off.</p>

<a name="Wrapup"></a>
<h3>Wrapup</h3>

<p>I still feel a little bit uncomfortable in JavaScript projects, as a long-time native developer. However feel like VS Code is a nice mix of the freeform "just do something" style of Text Editors, which work across a lot of systems and the tight-knit IDEs that are bound to a specific domain. It can be a bridge between worlds.</p>

<p>VS Code has become my main editor in Ruby and JavaScript, due to having great support for the projects and being an OSS project which I feel like I can contribute to. No more being <a href="https://github.com/alcatraz/Alcatraz/issues/475">locked out</a> of improving my editor. Awesome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Spelunking: Injection for Xcode Plugin]]></title>
    <link href="http://artsy.github.io/blog/2016/06/29/code-spelunking-injection/"/>
    <updated>2016-06-29T12:00:00-04:00</updated>
    <id>http://artsy.github.io/blog/2016/06/29/code-spelunking-injection</id>
    <content type="html"><![CDATA[<p>It was only three months ago that I came to the conclusion of just how much time I had wasted <a href="http://artsy.github.io/blog/2016/03/05/iOS-Code-Injection/">on code compilation cycles</a>, once I started to play with <a href="https://github.com/johnno1962/injectionforxcode">Injection for Xcode</a>. I still feel guilt about the time I wasted. However, I'm trying to turn that into something constructive. In order to do that, I need to have a solid understanding of the fundamentals on how Injection For Xcode works.</p>

<p><a href="https://ashfurrow.com/">Ash</a> says one of the best ways to <a href="https://ashfurrow.com/blog/teaching-learning/">learn is to teach</a>. So I'm going to try take you through a guided tour of the code-base. You need some pretty reasonable Objective-C chops to get this, but anyone with an app or two under their belt should be able to <a href="https://en.wikipedia.org/wiki/Grok">grok</a> it.</p>

<!-- more -->


<p><img src="/images/2016-06-29-injection-overview/overview.png" alt="Xcode Project Overview" /></p>

<p>You might find it easier to clone the repo and have Xcode open along-side this article, to quickly do that, run these commands to put it in a temporary folder via the terminal:</p>

<pre><code class="sh">cd /tmp/
git clone https://github.com/johnno1962/injectionforxcode TempInjection
open TempInjection/InjectionPluginLite/InjectionPlugin.xcodeproj/
</code></pre>

<a name="A.note.on.code.style"></a>
<h2>A note on code style</h2>

<p>I am of the _why <a href="https://www.smashingmagazine.com/2010/05/why-a-tale-of-a-post-modern-genius/#dont-be-afraid-to-take-risks">camp of programming</a> - the code we are spelunking through can feel foreign to modern Objective-C, and it's not got tests. <a href="https://github.com/johnno1962/">@Johno1962</a> described it to me as being like 1997's Objective-C. The end result of all this code <em>is</em> beautiful, whether the code is - is a matter of perspective. I'm super happy it exists.</p>

<a name="Targets"></a>
<h2>Targets</h2>

<ul>
<li>InjectionPlugin - The user facing Xcode plugin</li>
<li>InjectionLoader - A Bundle used to skip patching a project for injection.</li>
<li>iOSBundleTemplate - A folder to a reference implementation of a iOS Project</li>
<li>OSXBundleTemplate - Same but for OSX Project</li>
<li>unhide - A command line tool that extracts symbols from a Swift Framework</li>
</ul>


<a name="Implementation.Order"></a>
<h2>Implementation Order</h2>

<p>I want to go through the code-base from the perspective what happens when it:</p>

<ul>
<li>Loads up inside Xcode.</li>
<li>Recieves a call to inject.</li>
</ul>


<a name="Launch"></a>
<h3>Launch</h3>

<p>All Xcode plugins have the exact same launch process, you <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Info.plist#L21-L22">define a class</a> in the info.plist, this class, <code>INPluginMenuController</code>, gets <code>+ pluginDidLoad:</code> called. This is where you <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L83-L94">set up a shared instance</a>, and can keep a reference to your bundle.</p>

<p>This triggers the interesting stuff in <code>applicationDidFinishLaunching:</code> this sets up the <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L131-L137">user interface from a nib file</a>, which <a href="http://artsy.github.io/blog/2016/06/27/dependency-injection-in-swift/">DIs</a> in a lot of the instance variables, and will send you to get a new version of Injection if it fails. It then sets up the menu ( note: <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L151-L154">interesting use of c-structs here</a> ) and starts a TCP server, then registers for when a <code>NSWindow</code> becomes active.</p>

<a name="Server"></a>
<h4>Server</h4>

<p>The server is a <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L512-L535">c TCP socket</a>, prior to digging in here, I'd never needed to see one. I see a lot of references to Android injection, so I assume the low-level choice in a socket  was so the same code can do both platforms.</p>

<pre><code class="c">- (void)startServer {
    struct sockaddr_in serverAddr;

    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(INJECTION_PORT);

    int optval = 1;
    if ( (serverSocket = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0 )
        [self error:@"Could not open service socket: %s", strerror( errno )];
    [...] // skipping a bunch of error handling
    else if ( listen( serverSocket, 5 ) &lt; 0 )
        [self error:@"Service socket would not listen: %s", strerror( errno )];
    else
        [self performSelectorInBackground:@selector(backgroundConnectionService) withObject:nil];
}
</code></pre>

<p>Assuming everything went well, then a <a href="https://en.wikipedia.org/wiki/Bonjour_%28software%29">Bonjour</a> <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L539-L542">service</a> is created advertising the socket on the network. This then moves to a background thread and starts a infinite runloop checking for new connections on the <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L545-L557">socket every 0.5 seconds</a>.</p>

<p>Here is it <a href="/images/2016-06-29-injection-overview/selected_bonjour.png">running</a> in <a href="http://tildesoft.com">Bonjour Browser</a>. So, what does this server do? That's handled inside <code>INPluginClientController</code>. It uses a MAC address so that you can have multiple non-competing services running on the same network.</p>

<p>At its simplest, the server exists to send messages between running multiple applications and the injection plugin. We'll get back to what the server does later.</p>

<a name="Inside.Xcode"></a>
<h4>Inside Xcode</h4>

<p>The plugin will keep track of the key editor window, <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L214-L220">this is done</a> by making sure the window's controller is of the class <code>IDEWorkspaceWindowController</code> and that it has a corresponding file.</p>

<p>That's basically everything set up for the plugin now, until a user decides to start using Injection. So we're going to move to what happens when you press <code>ctrl + =</code>.</p>

<a name="On.Preparing.for.Injection"></a>
<h4>On Preparing for Injection</h4>

<p>The work starts at <code>injectSource</code> <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L359">from INPluginMenuController</a>.</p>

<p>The first thing it does is grab the current file, then saves it. It then checks what type of file it is, as only <code>.m, .mm, .swift or .storyboard</code> can be injected.</p>

<p>Next, it pulls out a reference to the currently running LLDB session, the console in the bottom of Xcode. It checks if the server has any active clients.</p>

<p>OK, to understand the next bit you need to understand what <em>"unpatched injection"</em> is. In order to support code injection, your app has to have some way to communicate back to the TCP server hosted in Xcode. This can be done either by <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/documentation/patching_injection.md">including some source code</a> in your project, or by adding it in at runtime. Including the source code, is "patching" your project to allow injection. It's optional because of what comes next.</p>

<p>If there are no clients connected, then requests a pause from LLDB, allowing the plugin to send messages to the running app, it then waits a few microseconds to give the debugger chance to load. Once it's loaded <code>loadBundle:</code> is <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L404-L415">called</a>.</p>

<p>Injection then sends <code>expr -l objc++ -O -- (void)[[NSClassFromString(@"NSBundle")  bundleWithPath:@"/Users/orta/Library/Application Support/Developer/Shared/Xcode/Plug-ins/InjectionPlugin.xcplugin/Contents/Resources/InjectionLoader.bundle"] load]</code> into the debugger. Causing the same code as the patch to exist inside your app.  This code comes from the second target from the list at the top, and is hosted inside the plugin's bundle (meta...).</p>

<p>With that verified, it's ready to inject the source code.</p>

<a name="Code.Injection.Compilation"></a>
<h4>Code Injection Compilation</h4>

<p>If everything is good, and ready to go, and we've got confirmation that a client exists, Injection starts monitoring for file changes inside your Xcodeproject.</p>

<p>A lot of the code injection work is done inside perl scripts, another new language for me. OK, so, at the end of <code>injectSource</code> it runs <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl">injectSource.pl</a> with an argument of the file to inject.</p>

<p>Note, a lot of ground-work for the perl scripts is done inside <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/common.pm">common.pm</a> - which is a module the other <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl#L15">scripts import</a>.</p>

<p>It is the role and responsibility of this script to setup, maintain and amend an xcodeproject that compiles just the class that has changed into a new bundle. Luckily for me this is pretty well documented <code>:D</code>.</p>

<p>It starts out by copying a template xcodeproject (either <code>iOSBundleTemplate</code> or <code>OSXBundleTemplate</code>) into your current project directory. I <a href="https://github.com/artsy/eigen/pull/1236/files#diff-a084b794bc0759e7a6b77810e01874f2R46">add this</a> to the <code>.gitignore</code>.</p>

<p>Next it pulls out the build settings for all these keys <code>FRAMEWORK_SEARCH_PATHS HEADER_SEARCH_PATHS USER_HEADER_SEARCH_PATHS GCC_VERSION ARCHS VALID_ARCHS GCC_PREPROCESSOR_DEFINITIONS GCC_ENABLE_OBJC_EXCEPTIONS</code> from your project, into the sub-project.</p>

<p>Next it determines how to handle code-signing on the app, as it supports both simulator and on-device, and you need to sign to run any code on a device.</p>

<p>After that, if needs to understand how to compile an individual file, it gets a reference to the build log dirs for the <a href="/images/2016-06-29-injection-overview/build_logs.png">derived data</a> for your app. They're zipped files, so it unzips them and parses the log. Here's an example of what <a href="/images/2016-06-29-injection-overview/a_build_log.png">compiling a single class from Eigen looks like</a> (I've highlighted the useful bits). Internally, this is called the learnt db.</p>

<p>The learnt db is used to compile a class to be individually compiled into a <code>injecting_class.o</code> file, I can't quite figure out where that file comes from though.</p>

<p>To wrap up the compilation it needs to take the compiled object <code>injecting_class.o</code> and statically link it to the bundle that is generated inside the sub-project. Here is the <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl#L331-L365">command line generation</a>, building the script is a little bit <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl#L376-L467">more involved</a> - but that's generally because it's trying to support a lot of user options. The main class that exists in the bundle is <code>BundleContents</code>.</p>

<p>The compiled bundle is then renamed so that you don't have name clashes, it's just incremental integers. My current sub-project I'm using for debugging looks like this:</p>

<p><img src="/images/2016-06-29-injection-overview/injection_subproject.png" alt="Injection Subproject" /></p>

<p>With the <code>Logs</code> dir being a symlink to the derived data folder.</p>

<p>With that done, it will <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl#L487-L503">include any nibs</a> from compiling storyboards, and <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl#L505-L512">code-sign the bundle</a> if it's going to a device. Finally it prints out <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl#L515">the new bundle path</a> in so the monitoring script can work with it.</p>

<a name="Script.Monitoring"></a>
<h4>Script Monitoring</h4>

<p>The script to create the Xcode project, amend it, and compile is done as a separate process. It's <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginClientController.m#L365">done</a> via the <a href="http://linux.die.net/man/3/popen">function</a> <code>popen</code>. This is then monitored in background, <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginClientController.m#L382">listening for output lines</a> that begins with <code>&lt;</code>, <code>&gt;</code>, <code>!</code>, <code>%</code> and <code>?</code>. The one that we're most interested in, is the <code>!</code> operator which tells the server the filepath of the now compiled <code>InjectionBundleX.bundle</code>, in my most recent case, this looked like <code>/Users/orta/dev/ios/energy/iOSInjectionProject/build/Debug-iphonesimulator/InjectionBundle4.bundle</code>.</p>

<p>This <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginClientController.m#L422-L423">tells the</a> server running inside Xcode that it has a file to send to the clients.</p>

<a name="How.the.server.works"></a>
<h4>How the server works</h4>

<p>Alright, back to <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginClientController.m">the INPluginClientController</a>. Skipping over the option setting <code>IBAction</code>s and <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginClientController.m#L129-L185">RTF-formatted logging</a>. We come to the initial connection responder: <code>setConnection:</code>.</p>

<p>So, this is where I ended up a bit out of my comfort zone. This isn't a blog post about sockets and c though, so I'll annotate what's going on from the high level thoughout this <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginClientController.m#L189">connection setup function</a>.</p>

<ul>
<li>Grab some the main client file from socket, then if it's is an injection message, set the Injection console's info label to that filepath, this is the <code>BundleContents.m</code>.</li>
<li>Otherwise inject all objects from a storyboard (not too sure whats going on there TBH)</li>
<li>The server <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginClientController.m#L216">asks the client</a> for the app's path e.g. <code>/Users/orta/Library/Developer/CoreSimulator/Devices/CDC9D8EF-AAAD-47F8-8D53-C3C69551E85A/data/Containers/Data/Application/1F636180-7113-406E-88F8-7E43EFAC13F6"</code></li>
<li>There's some more communication around the <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginClientController.m#L229-L230">app's architecture</a>.</li>
<li>The app gets a <a href="/images/2016-06-29-injection-overview/badge.png">badge</a> with the client count on it, so you know it's working.</li>
<li>If checks if you want the File Watcher turned on.</li>
</ul>


<p>From that point the server's job is mainly to pass messages and files that come out of the scripts between the client and the host doing the compilation.</p>

<a name="File.Watcher"></a>
<h4>File Watcher</h4>

<p>As an option you can set in the preferences toggles a File Watcher. I found a bunch of references to this in the code, so I wanted to at least dig into that. When you turn it on, any save will trigger an injection. This is done by looking for the folder that your <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/INPluginMenuController.m#L432-L436">project resides in</a>, then using Apple's <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/FileWatcher.m#L31">file system event stream</a> to monitor for save changes. Then when a new FS event is triggered, it re-injects that file. I bet it's turned off by default as you'll see errors when it's not compilable.</p>

<a name="Client-Side"></a>
<h2>Client-Side</h2>

<p>We've hand-waved though the client-side of the app during the patching stage of installation, but to understand both parts of the system we need to cover the client side in a bit more depth. There's two aspects to it, the initial bundle/patch and incremental bundles that contain the new compiled code.</p>

<a name="Client.Setup"></a>
<h4>Client Setup</h4>

<p>To understand this, we need to grok a 1,200 LOC header file <code>:D</code>, it has a few responsibilities though. So we can try work through those, to <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h">BundleInjection.h</a>. Interesting note, when you are patching your application - you're actually making a link to a copy of this file inside your <code>/tmp/</code> dir.</p>

<pre><code class="objc">#ifdef DEBUG
static char _inMainFilePath[] = __FILE__;
static const char *_inIPAddresses[] = {"10.12.1.67", "127.0.0.1", 0};

#define INJECTION_ENABLED
#import "/tmp/injectionforxcode/BundleInjection.h"
#endif
</code></pre>

<a name="Client.Socket.Connection"></a>
<h4>Client Socket Connection</h4>

<p>Like the server, this has two responsibilities - using Bonjour to find the server, and raw socket communication. There is nothing unique about the Bonjour mutlicast work, so I'm skipping that. Once the socket knows how to establish a connection between processes <code>+ bundleLoader</code> <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L359">is called</a> on a background thread.</p>

<p>So, what does <code>bundleLoad</code> do?</p>

<ul>
<li>It checks if it's a new Injection install in the app, <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L366-L367">if so</a> it sets up <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/documentation/tunable_parameters.md">INParameters and INColors</a> for tunable parameters.</li>
<li>It then determines the <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L383-L400">hardware architecture</a> for it to be sent to the server for compilation later.</li>
<li>Attempt to connect to the server, 5 times.</li>
<li>If it succeeds, <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L415">write the location</a> of the <code>BundleInjection</code> file to the server. Triggering the first of the socket work on the server.</li>
<li>Expect a response of the <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L417">server's</a> version of <code>BundleInjection</code></li>
<li>If the bundle is compiling storyboards on iOS, <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L424-L429">swizzle some</a> of the UINib init functions.</li>
<li>Pass the <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L443">home directory of the app</a> to the server.</li>
</ul>


<p>From there the socket goes into runloop mode on it's on thread.</p>

<a name="Client.Socket.Runloop"></a>
<h4>Client Socket Runloop</h4>

<p>As with server monitoring, the client listens for strings that begin with special prefixes:</p>

<ul>
<li><code>~</code> - Injects, then Re-creates the app degelate + view controller hierarchy.</li>
<li><code>/</code> - <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L644">Loads</a> the bundle path that was sent in.</li>
<li><code>&gt;</code> - Accepts a file or directory to <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L476">be sent through the socket</a>.</li>
<li><code>&lt;</code> - Sends a requested file or directory to <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L492">through the socket</a>.</li>
<li><code>#</code> - <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L540">Receives</a> an <code>NS/UIImage</code> via NSData for Tunable Parameters.</li>
<li><code>!</code> - Logs to console</li>
<li>Otherwise, assume it's another Tunable Parameter.</li>
</ul>


<a name="Loading.the.Bundle"></a>
<h4>Loading the Bundle</h4>

<p>When the new bundle is loaded <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl#L303-L308">it triggers</a> this code:</p>

<pre><code class="objc">+ (void)load {
    Class bundleInjection = NSClassFromString(@"BundleInjection");
    [bundleInjection autoLoadedNotify:$flags hook:(void *)injectionHook];
}
</code></pre>

<p>Which does the job of letting the running app know that instances have been updated with new code. Injection does three things:</p>

<ul>
<li>A global NSNotification for .</li>
<li>Sends all instances of classes injected a message that they've been injected.</li>
<li>Sends all classes that have been injected a message they've been injected.</li>
</ul>


<p>Which is where this goes from "complex", to "I would need to study up to do this." Let's start of quoting the README that <a href="https://github.com/johnno1962/">@Johno1962</a> and I worked on for a while.</p>

<blockquote><p>It can be tough to look through all of the memory of a running application. In order to determine the classes and instances to call the injected callbacks on, Injection performs a "sweep" to find all objects in memory. Roughly, this involves looking at an object, then recursively looking through objects which it refers to. For example, the object's instance variables and properties.</p>

<p>This process is seeded using the application's delegate and all windows. Once all the in-memory reference are collected, Injection will then filter these references to ones that it has compiled and injected. Then sending them the messages referenced in the callbacks section.</p>

<p>If no references are found, Injection will look through all objects that are referred to via sharedInstance. If that fails, well, Injection couldn't find your instance. This is one way in which you may miss callbacks in your app.</p></blockquote>

<a name="Class...Method.Injections"></a>
<h4>Class + Method Injections</h4>

<p>So how does it pull that off? Calling <code>NSBundle</code>'s <code>- load</code> <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L648">here</a>, calls the <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSBundle_Class/index.html#//apple_ref/occ/instm/NSBundle/load">load function to call on all classes</a> inside that new bundle. This triggers the load function from the <code>InjectionBundle</code> that is auto-generated during the Injection stage. Here's what one of mine looks like:</p>

<pre><code class="objc">@interface InjectionBundle3 : NSObject
@end
@implementation InjectionBundle3

+ (void)load {
    Class bundleInjection = NSClassFromString(@"BundleInjection");
    [bundleInjection autoLoadedNotify:0 hook:(void *)injectionHook];
}

@end
</code></pre>

<p>This is generated from the <code>injectSource.pl</code> script <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/injectSource.pl#L311-L315">here</a>] <code>[bundleInjection autoLoadedNotify:$flags hook:(void *)injectionHook];</code> . It also comes with another function,</p>

<pre><code class="c">int injectionHook() {
    NSLog( \@"injectionHook():" );
    [InjectionBundle3 load];
    return YES;
}
</code></pre>

<p>What we care about is <code>&amp;injectionHook</code> which gets passed to <code>autoLoadedNotify</code> as a pointer to a function. Oddly enough, I'm a tad confused about the fact that the injection hook contains a reference to the function that calls it, but lets roll with it for now. Perhaps it's never actually called, <em>I asked</em> -it's for Android support, and isn't used.</p>

<p>So, we've had a fairly typical <code>NSBundle</code> <code>- load</code> load our classes into the runtime. This triggered the <code>InjectionBundle.bundle</code> to have it's classes created, and the first thing it does is pass a reference back to the <code>BundleInjection</code> class instance for the <code>injectionHook</code> function that calls the <code>load</code> on the new classes.</p>

<p><em>Note:</em> terminology changes here, I've talked about a bundle, but now that the code is in the runtime, we start talking about it as a dynamic library. These bundles contain 2 files <code>Info.plist</code>, <code>InjectionBundleX</code> - so when I say dynamic library, I'm referring to the code that is inside the bundle that is linked ar runtime (and thus dynamically linked in.)</p>

<p>Next, Injection creates a <a href="https://github.com/davetroy/astmanproxy/blob/f4b952a717b7e982b585bf0daa86398add394a88/src/include/dlfcn-compat.h#L44-L54">dynamic library info</a> <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L944-L946">struct</a> and uses <a href="http://linux.die.net/man/3/dladdr">dladdr</a> to fill the struct, based on the function pointer. This lets Injection know where in memory the library exists. It's now safe in the knowledge that the code has been injected into the runtime. Injection will re-create the app structure, if requested - like when it receives a socket event of <code>~</code>.</p>

<p>We're getting into Mach-O binary APIs, so put on your crash helmets. Injection is going to use the dynamic library info, and <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L959-L981">ask for the Objective-C</a> <code>__classlist</code> via <a href="http://www.manpagez.com/man/3/getsectdatafromheader/">getsectdatafromheader</a> for the new dynamic library. This works fine for Swift too, it <em>mostly</em> has to be exposed to the Objective-C runtime. If you want to understand more about what this looks like, read <a href="https://blog.zynamics.com/2010/07/02/objective-c-reversing-ii/">this blog post</a> from <a href="https://zynamics.com">Zynamics</a>. Injection then loops through the classes inside the library, via the most <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L988">intensely casted</a> line in of code in here: <code>Class *classReferences = (Class *)(void *)((char *)info.dli_fbase+(uint64_t)referencesSection);</code>.</p>

<p>These classes are then iterated though, and <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L836-L845">new implementations of functions are swizzled</a> to reference the new implementations. With Swift you have no guarantee that the methods are <code>dynamic</code> so all their <code>vtable</code> <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L847-L855">data is switched</a>. If you don't know what a vtable is check this <a href="https://en.wikipedia.org/wiki/Virtual_method_table">page on Wikipedia</a>.</p>

<p>Once all of the classes have had their methods switched, the <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L911-L937">class table is updated</a> to ensure that functions that rely on the class table ( e.g. <code>NSClassFromSelector</code> ) return the new values.</p>

<p>With valid class tables, and the newly injected functions added. Injection starts the memory sweep to send updated notifications.</p>

<a name="Class...Instance.Notifications"></a>
<h4>Class + Instance Notifications</h4>

<p>At <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L1028">this point</a> Injected does a run through the new class list again, if that class responds to the selector <code>+ injected</code> it runs it. It then does a check to see if the class's instances reponds to <code>- injected</code> if it does, it looks to see if it has any instances of the objects in it's liveObjects array. If the array hasn't been set up, then it needs to do a full memory sweep.</p>

<p>Injection has an <a href="https://github.com/johnno1962/Xprobe">Xprobe</a>-lite included inside it. This lives in <a href="https://github.com/johnno1962/injectionforxcode/blob/16a9b8e93b458b1c5916e95df06fe8c74cb56862/InjectionPluginLite/Classes/BundleSweeper.h">BundleSweeper.h</a>. The quote opening this notification section above gave the start away, BundleSweeper <a href="https://github.com/johnno1962/injectionforxcode/blob/16a9b8e93b458b1c5916e95df06fe8c74cb56862/InjectionPluginLite/Classes/BundleSweeper.h#L47">looks at the app delegate</a> ( or a <a href="https://github.com/johnno1962/injectionforxcode/blob/16a9b8e93b458b1c5916e95df06fe8c74cb56862/InjectionPluginLite/Classes/BundleSweeper.h#L55">Cocos2D director object</a>) and then starts to recursively look at every object that it's related to. This is done by adding a <code>bwseep</code> function to <code>NSObject</code> then individually customizing it for known container classes, and "reference" classes e.g <a href="https://github.com/johnno1962/injectionforxcode/blob/16a9b8e93b458b1c5916e95df06fe8c74cb56862/InjectionPluginLite/Classes/BundleSweeper.h#L228">NSBlock</a>, <a href="https://github.com/johnno1962/injectionforxcode/blob/16a9b8e93b458b1c5916e95df06fe8c74cb56862/InjectionPluginLite/Classes/BundleSweeper.h#L221">NSData</a>, NSString, NSValue etc. The <code>bsweep</code> function adds itself to the <a href="https://github.com/johnno1962/injectionforxcode/blob/16a9b8e93b458b1c5916e95df06fe8c74cb56862/InjectionPluginLite/Classes/BundleSweeper.h#L113-L117">shared list</a> of "objects seen", checks for an it being a <a href="https://github.com/johnno1962/injectionforxcode/blob/16a9b8e93b458b1c5916e95df06fe8c74cb56862/InjectionPluginLite/Classes/BundleSweeper.h#L119-L124">private class or a transition</a>, if it's not then it loops through the <a href="http://stackoverflow.com/questions/16304483/debug-obtain-a-list-of-all-instance-variables-of-an-object-unknown-type">IvarList</a> and runs <code>bsweep</code> on all of those. With that done, it casually tests to see if there are any weakly held objects that <a href="https://github.com/johnno1962/injectionforxcode/blob/16a9b8e93b458b1c5916e95df06fe8c74cb56862/InjectionPluginLite/Classes/BundleSweeper.h#L148-L160">tend to use common selectors</a>.</p>

<p>Let that simmer for a bit ( I jest, it's super fast. ) and then you have <em>almost</em> every object in your object graph being told that they've been updated. I say almost because of the above caveat. Can't find all objects this way. Singletons that never are referenced strongly from another object inside the findable graph wouldn't get a notification this way for example.</p>

<p>With all the fancy class an instance nofications sorted, there is a good old reliable <code>NSNotification</code> - <a href="https://github.com/johnno1962/injectionforxcode/blob/master/InjectionPluginLite/Classes/BundleInjection.h#L1065">here</a>. Which is what I based my <a href="https://github.com/artsy/eigen/pull/1236">work on for Eigen</a>, super simple, extremely reliable and great for re-use.</p>

<p><img src="https://cloud.githubusercontent.com/assets/49038/13548868/131cbb1e-e2c8-11e5-9f61-4acdfd10b6aa.gif" alt="https://cloud.githubusercontent.com/assets/49038/13548868/131cbb1e-e2c8-11e5-9f61-4acdfd10b6aa.gif" />.</p>

<hr />

<p><strong>Phew!</strong></p>

<p>So, this covered the majority of how Injection for Xcode works. It's a <em>really</em> powerful tool, that can vastly improve your day-to-day programming. When I showed a draft of this post to <a href="https://github.com/johnno1962/">@Johno1962</a> he reminded me that <a href="https://github.com/johnno1962/Diamond">Diamond</a> - his Swift scripting improvement tool, had it's own version of Injector inside that, that is much <a href="https://github.com/johnno1962/Diamond/blob/master/Reloader/Reloader.m">simpler and a easier read</a> at 120 LOC. However, can't understand the future without understanding the past.</p>

<p>A lot of the most complicated code is around:</p>

<ul>
<li>The client-server architecture, and about passing files/folders between the running application and the Xcode plugin.</li>
<li>The recursive memory sweeping required to get a notification that it's done.</li>
</ul>


<p>The actual work involved in <a href="https://github.com/johnno1962/injectionforxcode/blob/2c1696e7301fdcf1d99a8a75be501df7c25d93e8/InjectionPluginLite/Classes/BundleInjection.h#L807-L938">doing the injection, and replacing the classes</a> isn't particularly complicated, and is easy to understand without c/Mach-o domain knowledge. It's making sure the environment is set up and supporting useful features like Storyboards, Android via Apportable, ARC and no-ARC, 32bit vs 64bit and iOS vs Mac where things start to become more complex.</p>

<p>As of Xcode 8, Xcode Plugins are on the way out, though there are hacks to work around the system to install them, doing so might not be the smartest of moves yet. It's hard to see where the future lies here. However,</p>

<p><img src="http://media2.giphy.com/media/VHW0X0GEQQjiU/giphy.gif" alt="Giphy" /></p>

<p>So we'll see in a few months.</p>

<p>If you're interested in this kind of stuff, follow <a href="https://github.com/johnno1962/">@Johno1962</a> on Twitter, he's <a href="https://twitter.com/Injection4Xcode">@Injection4Xcode</a> - Chris Lattner follows him, so you know it's good stuff. He's always got some project that is pushing a boundry or two.</p>
]]></content>
  </entry>
  
</feed>
